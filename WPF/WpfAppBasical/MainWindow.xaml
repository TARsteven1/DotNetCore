<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfAppBasical"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" x:Class="WpfAppBasical.MainWindow"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
	<Window.Resources>
		<Style x:Key="defaultBaseStyle" TargetType="{x:Type Button}">
			<Setter Property="FontSize" Value="40"/>
			<Setter Property="Foreground" Value="Blue"/>
		</Style>
		<Style x:Key="defaultFirstStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource defaultBaseStyle}">
			<Setter Property="FontSize" Value="30"/>
		</Style>
		<Style x:Key="TriggerStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource defaultFirstStyle}">
			<Setter Property="FontSize" Value="40"/>
			<!--Trigger : 监测依赖属性的变化、触发器生效-->
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="FontSize" Value="60"/>
					<Setter Property="Foreground" Value="Yellow"/>
				</Trigger>
				<Trigger Property="IsMouseOver" Value="False">
					<Setter Property="FontSize" Value="40"/>
					<Setter Property="Foreground" Value="Red"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="MultiTriggerStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource defaultBaseStyle}">
			<Style.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="true"/>
						<Condition Property="IsFocused" Value="true"/>
					</MultiTrigger.Conditions>
					<Setter Property="Background" Value="Green"/>
				</MultiTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="DataTriggerStyle" TargetType="TextBox" >
			<!--DataTrigger : 监测依赖数据的变化、触发器生效-->
			<Style.Triggers>
				<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=Text}" Value="ok">
					<Setter Property="Background" Value="GreenYellow"/>
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="EventTriggerStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource defaultBaseStyle}">
			<Style.Triggers>
				<EventTrigger RoutedEvent="Mouse.MouseEnter">
					<EventTrigger.Actions>
						<BeginStoryboard Name="FontAnim">
							<Storyboard>
								<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="FontSize" To="10"></DoubleAnimation>
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger.Actions>
				</EventTrigger>
				<EventTrigger RoutedEvent="Mouse.MouseLeave">
					<EventTrigger.Actions>
						<BeginStoryboard Name="FontAnimre">
							<Storyboard>
								<DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="FontSize" To="30"></DoubleAnimation>
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger.Actions>
				</EventTrigger>

			</Style.Triggers>
		</Style>
		<!--自定义控件模板-->
		<ControlTemplate x:Key="TarButtonTemplate" TargetType="{x:Type Button}">
			<Border Background="Red" CornerRadius="2">
				<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
			</Border>
		</ControlTemplate>
		<!--自定义数据模板-->
		<DataTemplate x:Key="comTemplate">
			<StackPanel Orientation="Horizontal" Margin="5,0">
				<Border Width="10" Height="10" Background="{Binding Code}"/>
				<TextBlock Text="{Binding Code}" Margin="5,0"/>
			</StackPanel>
		</DataTemplate>
		<TextBox x:Key="txt"	>------分割线--------</TextBox>
		<Style x:Key="ButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#F3F3F3" Offset="0"/>
			<GradientStop Color="#EBEBEB" Offset="0.5"/>
			<GradientStop Color="#DDDDDD" Offset="0.5"/>
			<GradientStop Color="#CDCDCD" Offset="1"/>
		</LinearGradientBrush>
		<SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
		<!--自定义控件模版，并引用自定义模版-->
		<Style x:Key="ControlButtonStyleSample" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template" Value="{DynamicResource ImgBtnTemplate }">
				<!--<Setter.Value>-->
					<!--<ControlTemplate TargetType="{x:Type Button}">
						<Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding IsDefaulted}" SnapsToDevicePixels="true">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Themes:ButtonChrome>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="RenderDefaulted" TargetName="Chrome" Value="true"/>
							</Trigger>
							<Trigger Property="ToggleButton.IsChecked" Value="true">
								<Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>-->
				<!--</Setter.Value>-->
			</Setter>
		</Style>
		<ControlTemplate TargetType="Button" x:Key="ImgBtnTemplate">
			<Border Background="{TemplateBinding Background}" >
				<ContentPresenter />
			</Border>
		</ControlTemplate>		

	</Window.Resources>
	<StackPanel Background="LightBlue">
		<TabControl Height="420" Margin="0,0,-0.4,0" >
			<TabItem Header="布局">
				<!--Grid : 类似table表格、可灵活设置行列并放置控件元素、比较常用-->
				<Grid>
					<!--UniformGrid : 指定行和列的数量, 均分有限的容器空间-->
					<Grid.RowDefinitions>
						<RowDefinition Height="auto"/>
						<RowDefinition/>
					</Grid.RowDefinitions>

					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition Width="2*"/>
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<Border Background="Red">
						<!--StackPanel: 水平或垂直排列元素、Orientation属性分别: Horizontal / Vertical-->
						<StackPanel Orientation="Horizontal">
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20" Content="111"/>
						</StackPanel>
					</Border>
					<Border Background="Green" Grid.Column="0" Grid.Row="1">
						<!--DockPanel : 根据容器的边界、元素进行Dock.Top、Left、Right、Bottom设置-->
						<DockPanel LastChildFill="False">
							<Button Width="100" Height="20" DockPanel.Dock="Left"/>
							<Button Width="100" Height="20" DockPanel.Dock="Top"/>
							<Button Width="100" Height="20" DockPanel.Dock="Right" Margin="0,171,0,190.6"/>
						</DockPanel>
					</Border>
					<Border Background="Blue" Grid.Column="1" Grid.Row="1">
						<!--WrapPanel : 水平或垂直排列元素、针对剩余空间不足会进行换行或换列进行排列-->
						<WrapPanel>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
						</WrapPanel>
					</Border>
					<Border Background="Black" Grid.Column="2" Grid.Row="1">
						<!--UniformGrid:按照固定行列均匀排布元素-->
						<UniformGrid Columns=" 3" Rows="2">
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
							<Button Width="100" Height="20"/>
						</UniformGrid>
					</Border>
				</Grid>
			</TabItem>
			<TabItem Header="样式&amp;触发器">
				<StackPanel>
					<Button Style="{StaticResource defaultFirstStyle}"   Width="100" Height="40">
						<Button.Content>
							<TextBlock Text="hel"></TextBlock>
						</Button.Content>
					</Button>
					<Button Style="{StaticResource TriggerStyle}" Foreground="Red" Content="hel" Width="100" Height="40"/>
					<Button  Style="{StaticResource EventTriggerStyle}"    Foreground="Pink" Content="hel" Width="100" Height="40" Template="{DynamicResource TarButtonTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
					<TextBox Style="{StaticResource DataTriggerStyle}"   Width="100" Height="40" Margin="342,0"/>
					<Button Style="{StaticResource EventTriggerStyle}"  Content="hel" Width="100" Height="40"/>
				</StackPanel>
			</TabItem>
			<TabItem Header="控件模版">
				<Button Width="100" Height="100"   Style="{DynamicResource ControlButtonStyleSample}"/>
				<!--<Button Width="200" Height="200" Background="AliceBlue" Template="{StaticResource ImgBtnTemplate}" Content="11"/>-->
			</TabItem>
			<TabItem Header="数据模版">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="auto"/>
						<RowDefinition Height="auto"/>
						<RowDefinition Height="auto"/>
					</Grid.RowDefinitions>
					<Border Background="Red">

						<WrapPanel Orientation="Vertical" >
							<TextBlock Text="CellTemplate->" Height="20" Width="200" HorizontalAlignment="Left"/>
							<DataGrid Name="gd" AutoGenerateColumns="False" CanUserSortColumns="True"  CanUserAddRows="False">
								<DataGrid.Columns>
									<DataGridTextColumn Binding="{Binding UserName}" Width="100" Header="学生姓名"/>
									<DataGridTextColumn Binding="{Binding ClassName}" Width="100" Header="班级名称"/>
									<DataGridTextColumn Binding="{Binding Address}" Width="200" Header="地址"/>
									<DataGridTemplateColumn Header="操作" Width="100" >
										<DataGridTemplateColumn.CellTemplate>
											<DataTemplate>
												<StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
													<Button Content="编辑"/>
													<Button Margin="8 0 0 0" Content="删除" />
												</StackPanel>
											</DataTemplate>
										</DataGridTemplateColumn.CellTemplate>
									</DataGridTemplateColumn>
								</DataGrid.Columns>
							</DataGrid>
							<TextBlock Height="20"/>
						</WrapPanel>
					</Border>
					<Border Background="Yellow" Grid.Row="1">
						<StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
							<TextBlock Text="ItemTemplate->" Height="20" Width="200" HorizontalAlignment="Stretch"/>
							<ComboBox Name="cob" Width="120" Height="20" ItemTemplate="{StaticResource comTemplate}"/>
							<ListBox Name="lib" Width="120" Height="100" Margin="5,0"  ItemTemplate="{StaticResource comTemplate}"/>
						</StackPanel>
					</Border>
					<Border Background="Green" Grid.Row="2">
						<WrapPanel>
							<TextBlock Text="ItemsControl->" Height="20" Width="200" />
							<ItemsControl Name="ic">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<WrapPanel Orientation="Horizontal"/>
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>

								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<Button Width="50" Height="50" Content="{Binding Code}"/>
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
						</WrapPanel>
					</Border>
				</Grid>
			</TabItem>
			<TabItem Header="数据绑定">
				<Grid>
					<StackPanel	>
						<!--事件驱动-->
						<Slider Width="200" ValueChanged="Slider_ValueChanged" />
						<TextBox FontSize="30" Height="30" Name="txt"/>
						<!--数据驱动(元素绑定),绑定模式分为单次绑定，（反）单向，双向绑定，默认为双向绑定-->
						<Slider Width="200" x:Name="sd" />
						<TextBox Background="Pink" FontSize="30" Height="30" Text="{Binding  ElementName=sd ,Path=Value,Mode=Default}"/>
                        <!--Text="{Binding Value, ElementName=sd,Mode=Default}" 另一种写法绑定对象的指定属性（Value）Height等-->
						<!--绑定数据源-->
						<TextBox Text="{Binding Source={StaticResource txt},Path=Text}"/>
						<!--使用DataContext绑定数据-->
						<TextBox x:Name="BindingTxt" Text="{Binding UserName,FallbackValue='Not Found'}"/>

						<TextBox Text="{Binding Code ,UpdateSourceTrigger=PropertyChanged}"/>
						<Button Command="{Binding command}" Content="修改数据" Width="200"/>
                        <!--使用依赖属性进行数据绑定-->
                        <TextBox Text="{Binding propDp.MyValue}"/>
                    </StackPanel>
                </Grid>
			</TabItem>
		</TabControl>
	</StackPanel>
</Window>
